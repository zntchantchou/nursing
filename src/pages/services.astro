---
import { getCollection } from "astro:content";
import BaseLayout from "../components/BaseLayout.astro";
import { AppLocaleEnum, getTranslation } from "../utils/i18n";
import { getLocale } from "astro-i18n-aut";

const services = await getCollection("services");
const locale = getLocale(Astro.url) as AppLocaleEnum;
const fmtServicesPromises = services.map(async ({ data }) => {
  let result: { [key: string]: { id?: any; label: any; value: any } } = {
    id: data.id,
  };
  delete data.id;
  for (let [k, v] of Object.entries(data)) {
    result[k] = {
      label: await getTranslation(locale, k, "services"),
      value:
        k == "leistungsKomplex"
          ? await getTranslation(
              locale,
              result?.id as unknown as string,
              "services"
            )
          : v,
    };
  }
  return result;
});
const translatedServices = await Promise.all(fmtServicesPromises);
const title = await getTranslation(locale, "services");
---

<BaseLayout title={title.data}>
  <div id="services">
    {
      translatedServices.map((ts) => {
        return (
          <div class="flex flex-col justify-center px-4 box-border rounded-md border-2 border-black hover:border-gray-400 border-solid h-48 cursor-pointer">
            <p class="mb-4 font-bold text-lg">
              {" "}
              {ts["leistungsKomplex"]?.value}
            </p>
            <p>
              {ts["punktzahl"]?.label} : {ts["punktzahl"]?.value}
            </p>
            <p>
              {ts["betrag"]?.label} : {ts["betrag"]?.value} €
            </p>
            <p>
              {ts["zuschlag"]?.label} : {ts["zuschlag"]?.value} €
            </p>
            <p>
              {ts["gesamtpreis"]?.label} : {ts["gesamtpreis"]?.value} €
            </p>
          </div>
        );
      })
    }
  </div>
</BaseLayout>

<style>
  .title {
    font-size: 2rem;
    margin-bottom: 1.4rem;
  }

  /* .service-label {
    font-size: 1.1rem; */
  /* } */
  #services {
    /* background-color: burlywood; */
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
    row-gap: 1rem;
    column-gap: 1rem;
    overflow-x: hidden;
    overflow-y: scroll;
    height: calc(100vh - 18rem);
  }

  .service {
    cursor: pointer;
    border-radius: 1rem;
    box-sizing: border-box;
    padding: 0.6rem;
    /* border: solid 2px black; */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 14rem;
  }
</style>
